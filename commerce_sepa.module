<?php

/**
 * @file
 * Provides a SEPA payment method for Drupal Commerce
 *  
 */


/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_sepa_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['commerce_sepa'] = array(
    'title' => t('SEPA Payment'),
    'description' => t('Demonstrates credit card payment during checkout and serves as a development example.'),
    'active' => TRUE,
  );

  return $payment_methods;
}

/**
 * Payment method callback: settings form.
 */
function commerce_sepa_settings_form($settings = NULL) {
  $form = array();
  // Merge default settings into the stored settings array.
  $settings = (array) $settings + array(
    'commerce_sepa_transfer_bank_code_appellation' => 'Bank code',
    'commerce_sepa_transfer_subject_oid' => FALSE,
  );
	
	
	$mandate = '	
SEPA Direct Debit Mandate/SEPA-Lastschriftmandat
for SEPA Core Direct Debit Scheme/fÃ¼r SEPA-Basis-Lastschriftverfahren

By signing this mandate form, you authorise [Name] to send instructions to your bank to debit your account and your 
bank to debit your account in accordance with the instructions from [Name].';

  // help text
  $form['ccommerce_sepa_transfer_help_text'] = array(
    '#markup' => '<div class="help">' . t('<h4><strong>Setup instructions</strong></h4>
									<p>For better customer experience please use the token [order-payment-bank-details] to display the bank details on the invoice. 
									You can find an example invoice template doing this in the commerce_bank_transfer module folder.</p><p>Enter the bank account 
									details to display to customers who choose this payment method during checkout. Details left empty will not be shown. You can 
									also choose to leave all bank details empty and create your own output using the payment instructions.</p>') . '</div>', 
  );
  // settings
  $form['details'] = array(
    '#type' => 'fieldset',
    '#title' => t('SEPA Direct Debit Mandate'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
	);
	$form['details']['policy'] = array(
		'#type' => 'textarea',
		'#title' => t('SEPA Direct Debit Mandate'),
		'#description' => t('This is the SEPA Direct Debit Mandate the customer must confirm and will be mailed.'),
		'#default_value' => isset($settings['details']['policy']) ? $settings['details']['policy'] : $mandate,
		'#required' => FALSE,
		'#rows' => 6,
	);

  return $form;
}


/**
 * Payment method callback: submit form.
 */
function commerce_sepa_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  module_load_include('inc', 'commerce_sepa', 'include/commerce_sepa.iban_bic');

  // Default to a known test credit card number. For valid numbers of other card
  // types see: http://www.rimmkaufman.com/blog/credit-card-test-numbers/09112007/
  return commerce_sepa_iban_bic_form(array(), array('number' => '4111111111111111'), $payment_method);
}

/**
 * Payment method callback: submit form validation.
 */
function commerce_sepa_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {
  // Validate the credit card fields.
  module_load_include('inc', 'commerce_sepa', 'include/commerce_sepa.iban_bic');
	
  $settings = array(
    'form_parents' => array_merge($form_parents, array('credit_card')),
  );

  // Even though a form error triggered by the validate handler would be enough
  // to stop the submission of the form, it's not enough to stop it from a
  // Commerce standpoint because of the combined validation / submission going
  // on per-pane in the checkout form. Thus even with a call to form_set_error()
  // this validate handler must still return FALSE.
  if (!commerce_sepa_iban_bic_validate($pane_values['sepa'], $settings)) {
    return FALSE;
  }
}

/**
 * Payment method callback: submit form submission.
 */
function commerce_sepa_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  // Just as an example, we might store information in the order object from the
  // payment parameters, though we would never save a full credit card number,
  // even in examples!

	
	//$number = $pane_values['credit_card']['number'];
  //$pane_values['credit_card']['number'] = substr($number, 0, 4) . str_repeat('-', strlen($number) - 8) . substr($number, -4);
	
  $order->data['commerce_sepa'] = $pane_values;

  // Every attempted transaction should result in a new transaction entity being
  // created for the order to log either the success or the failure.
  commerce_sepa_transaction($payment_method, $order, $charge);
}

/**
 * Creates an example payment transaction for the specified charge amount.
 *
 * @param $payment_method
 *   The payment method instance object used to charge this payment.
 * @param $order
 *   The order object the payment applies to.
 * @param $charge
 *   An array indicating the amount and currency code to charge.
 */
function commerce_sepa_transaction($payment_method, $order, $charge) {
  $sepa_details = $order->data['commerce_sepa']['sepa'];

  $transaction = commerce_payment_transaction_new('commerce_sepa', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $charge['amount'];
  $transaction->currency_code = $charge['currency_code'];
  $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;

  $transaction->message = 'IBAN: @iban<br/>BIC: @bic';
  $transaction->message_variables = array(
    '@iban' => $sepa_details['iban'],
    '@bic' => $sepa_details['bic'],
  );

  commerce_payment_transaction_save($transaction);
}


function commerce_sepa_default_rules_configuration() {
  $configs = array();
  $rule = '{ "commerce_sepa_sent_sepa_direct_debit_mandate" : {
    "LABEL" : "Sent SEPA Direct Debit Mandate",
    "PLUGIN" : "reaction rule",
    "OWNER" : "rules",
    "TAGS" : [ "Commerce", "Commerce SEPA" ],
    "REQUIRES" : [ "commerce_payment", "rules", "rules_i18n", "commerce_checkout" ],
    "ON" : { "commerce_checkout_complete" : [] },
    "IF" : [
      { "commerce_payment_selected_payment_method" : { "commerce_order" : [ "commerce_order" ], "method_id" : "commerce_sepa" } }
    ],
    "DO" : [
      { "entity_fetch" : {
          "USING" : {
            "type" : "commerce_payment_transaction",
            "id" : [ "commerce-order:order-id" ]
          },
          "PROVIDE" : { "entity_fetched" : { "payment" : "Payment" } }
        }
      },
      { "entity_fetch" : {
          "USING" : { "type" : "commerce_customer_profile", "id" : [ "commerce-order:uid" ] },
          "PROVIDE" : { "entity_fetched" : { "customer_entity" : "Customer" } }
        }
      },
      { "mail" : {
          "to" : [ "commerce-order:mail" ],
          "subject" : "SEPA Direct Debit Mandate for order [commerce-order:order-number]",
          "message" : "SEPA Direct Debit Mandate for SEPA Core Direct Debit Scheme\r\n\r\nCreditor\u2019s Name \u0026 address: [site:name]\r\nCreditor identifier: DEXXXXXXXXXXX\r\nMandate reference: [commerce-order:order-number]\r\n\r\nI authorise the creditor to send instructions to my bank to debit my account and my bank to debit my account in accordance with the instructions from.\r\n\r\nAs part of your rights, you are entitled to a refund from your bank under the terms and conditions of your agreement with your bank. A refund \r\nmust be claimend within 8 weeks starting from the date on which your account was debited.\r\n\r\nDebitor\r\n[customer-entity:commerce-customer-address:name_line] \r\n[customer-entity:commerce-customer-address:organisation_name]\r\n[customer-entity:commerce-customer-address:thoroughfare]\r\n[customer-entity:commerce-customer-address:postal_code] [customer-entity:commerce-customer-address:locality]\r\n\r\nBank account\r\n[payment:message]\r\n",
          "language" : [ "commerce-order:state" ]
        }
      }
    ]
  }
	}';
  $configs['commerce_sepa_sent_sepa_direct_debit_mandate'] = rules_import($rule);
  return $configs;
}
